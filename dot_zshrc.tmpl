
#if command -v tmux &> /dev/null && [[ -n "$PS1" ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#    #[[ ! "$TERM" =~ screen ]
#    if [[ -n "$SSH_CONNECTION" ]]; then
#        exec tmux new-session -A -s default_ssh
#    else
#        exec tmux new-session -A -s default
#    fi
#else
#fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

alias grep='grep --color=auto'
alias rm=trash
alias lll='ls $LS_OPTIONS -alh'
alias sl='ls $LS_OPTIONS' # often screw this up
alias j='z'

# vim alias order
if [ $(command -v nvim) ]; then
    export VIM_COMMAND='nvim'
elif [ $(command -v mvim) ]; then
    export VIM_COMMAND='mvim -v'
else
    export VIM_COMMAND='vim'
fi
alias vim=$VIM_COMMAND
export EDITOR=$VIM_COMMAND
export VISUAL=$VIM_COMMAND

case "$OSTYPE" in
    cygwin*)
        alias open="cmd /c start"
        ;;
    linux*)
        alias open='xdg-open' #make this linux only!
        ;;
    darwin*)
        alias open='open'
        #export CXX=/usr/local/cellar/gcc/8.1.0/bin/g++-8
        # put your paths to clang-4.0 and clang++-4.0:
        export CC=/usr/local/opt/llvm/bin/clang
        export CXX=/usr/local/opt/llvm/bin/clang++
        export CXX11=/usr/local/opt/llvm/bin/clang++
        export CXX1X=/usr/local/opt/llvm/bin/clang++
        export PATH="/usr/local/opt/llvm/bin:/usr/local/bin:/usr/local/sbin:$PATH"
        export LDFLAGS=-L/usr/local/opt/llvm/lib
        export CPPFLAGS=-I/usr/local/opt/llvm/include
esac

export PROWLER_IO_HOME=~/PROWLER_IO_HOME

# Install poetry
export PATH="$HOME/.poetry/bin:$HOME/.local/bin:$PATH"

ulimit -Hn 250000
ulimit -n 150000

# Locks to first column, like after Ctrl-Cing a program http://jonisalonen.com/2012/your-bash-prompt-needs-this/
#$PS1="\[\033[G\]$PS1"

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
if [[ -f ~/.p10k.zsh ]]; then 
    export ZSH_THEME="powerlevel10k/powerlevel10k"
else 
    export ZSH_THEME="blinks"
    echo "powerlevel10k not installed"
fi
POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true

export SOLARIZED_THEME='dark'

# Comment this out to disable weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

plugins=(git github macos vi-mode python z colored-man-pages extract virtualenv fzf)
#z you press j (or z via alias) "word" and it will jump to the most likely directory
#extract something.tar.gz will extract pretty much any compression type

#Default path
export LD_LIBRARY_PATH=/usr/local/cuda-11.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda-11.0/lib64:$LD_LIBRARY_PATH
export LD_INCLUDE_PATH=:/usr/local/cuda/include:/usr/local/cuda/extras/CUPTI/include:$LD_INCLUDE_PATH

source $ZSH/oh-my-zsh.sh

export SLUGIFY_USES_TEXT_UNIDECODE=yes

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# source $(brew --prefix nvm)/nvm.sh

if [[ -n $VIRTUAL_ENV && -e "${VIRTUAL_ENV}/bin/activate" ]]; then
    source "${VIRTUAL_ENV}/bin/activate"
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/alansaul/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/alansaul/Downloads/google-cloud-sdk/path.zsh.inc'; fi
# The next line enables shell command completion for gcloud.
if [ -f '/Users/alansaul/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/alansaul/Downloads/google-cloud-sdk/completion.zsh.inc'; fi


# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
if [[ -f ~/.p10k.zsh ]]; then 
    [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fi

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

export PATH="$PYENV_ROOT:$PATH"
export PIPENV_PYTHON="$PYENV_ROOT/python"

if [ -z "$SSH_AUTH_SOCK" ]; then
   # Check for a currently running instance of the agent
   RUNNING_AGENT="`ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]'`"
   if [ "$RUNNING_AGENT" = "0" ]; then
        # Launch a new instance of the agent
        ssh-agent -s &> .ssh/ssh-agent
   fi
   eval `cat .ssh/ssh-agent`
fi

